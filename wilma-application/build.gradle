/*==========================================================================
Copyright since 2013, EPAM Systems

This file is part of Wilma.

Wilma is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Wilma is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Wilma.  If not, see <http://www.gnu.org/licenses/>.
===========================================================================*/

description = 'wilma application'

ext.javaxServletApi='javax.servlet:javax.servlet-api:3.1.0'

ext.componentFullName=

task docs(type: Javadoc) {
    destinationDir = file("$buildDir/docs/all")
    options.memberLevel = JavadocMemberLevel.PRIVATE
    for (subproject in project.subprojects) {
        if (subproject.plugins.hasPlugin(JavaPlugin)){
            source += files(subproject.sourceSets.main.java)
            classpath += files(subproject.sourceSets.main.compileClasspath)
        }
    }
}

task checkstyle(type: Checkstyle) {
    dependsOn subprojects.checkstyleMain
}

task deleteRelease(type: Delete) {
    delete rootProject.rootDir.absolutePath + '/wilma-application/release'
}

def myCopySpec = project.copySpec {
   from(rootProject.rootDir.absolutePath + '/wilma-application/modules/wilma-engine/') {
       include 'wilma.conf.properties'
       include 'readme.txt'
       include 'stubConfig.json'
   }
   from(rootProject.rootDir.absolutePath + '/wilma-application/modules/wilma-engine/build/libs/') {
     include "wilma-$wilmaVersion.$buildNumber" + '.jar'
   }
   from(rootProject.rootDir.absolutePath + '/wilma-application/resources/'){
     include 'certificate/wilma.cer'
     include 'certificate/wilma.jks'
   }
   from(rootProject.rootDir.absolutePath + '/') {
     include 'COPYRIGHT.txt'
     include 'COPYRIGHTS/'
   }
   
}

task copyToReleaseRoot (type: Copy) {
	dependsOn deleteRelease
	into(rootProject.rootDir.absolutePath + '/wilma-application/release')
	with myCopySpec
}

task createDir {
	dependsOn copyToReleaseRoot
	doLast{
	    file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/templates').mkdirs()
        file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/formatters').mkdirs()
        file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/interceptors').mkdirs()
        file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/cache/stub_descriptors').mkdirs()
        file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/condition-checkers').mkdirs()
        file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/jar').mkdirs()
        file(rootProject.rootDir.absolutePath + '/wilma-application/release/config/sequencehandlers').mkdirs()
	}
}

task release(type: Zip) {
	dependsOn createDir
	archiveName = "wilma-application-$wilmaVersion.$buildNumber"+'.zip'
    from rootProject.rootDir.absolutePath + '/wilma-application/release'
}

subprojects {

    repositories {
        maven { url "https://repository.jboss.org/nexus/content/groups/public" }
        maven { url 'https://jitpack.io' }
    }
    
    
    dependencies {
        compile(group: 'org.springframework', name: 'spring-context', version:'4.1.6.RELEASE')
        compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.0.13'
        compile(group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12')
        compile(group: 'org.slf4j', name: 'jul-to-slf4j', version:'1.7.12')
        compile group: 'commons-io', name: 'commons-io', version:'2.4'
        compile group: 'janino', name: 'janino', version:'2.5.10'
        compile group: 'net.sf.saxon', name: 'Saxon-HE', version:'9.9.0-2'
        testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
        testCompile(group: 'org.testng', name: 'testng', version:'6.8.5') {
            exclude(module: 'junit')
        }
        
        configurations.all{
        	  exclude(module: 'commons-logging')
        }
    }

    def checkstyleCommonReportDir = new File(rootProject.rootDir.absolutePath , '/wilma-application/build/reports/checkstyle')
    def checkstyleSubProjectReportFile = new File(project.buildDir.absolutePath , '/reports/checkstyle/main.xml')
    checkstyle.configFile = file("$rootProject.rootDir/config/checkstyle/checkstyle.xml")
    checkstyle.configProperties = ['samedir' : "$rootProject.rootDir/config/checkstyle"]
    checkstyle.toolVersion = '5.6'
    checkstyle.ignoreFailures = true
    checkstyleMain.classpath += configurations.compile
    checkstyleTest.classpath += configurations.compile
    checkstyleMain {
        doLast {
            ant.xslt(in: reports.xml.destination,
            style: new File("$rootProject.rootDir/config/checkstyle/checkstyle-noframes-sorted.xsl"),
            out: new File(checkstyleCommonReportDir, project.name + '-main.html'))
            copy {  //collect xml-s
                from checkstyleSubProjectReportFile
                into checkstyleCommonReportDir
                rename { String filename -> project.name + '-main.xml' }
            }
        }
    }
    
    test.useTestNG()

}
