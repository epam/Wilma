/*==========================================================================
Copyright 2013-2017 EPAM Systems

This file is part of Wilma.

Wilma is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Wilma is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Wilma.  If not, see <http://www.gnu.org/licenses/>.
===========================================================================*/

ext.componentDescription = "BrowserMob Proxy - tuned for Wilma"

apply from: '../common.gradle'

version = "2.0-beta-8-wilma-" + "$wilmaVersion"+'.'+"$buildNumber"

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version:'1.7.12'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version:'1.7.1'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version:'1.7.1'
    //note: upgrading this to 4.3 seems to be safe, however above 4.3 it seems dangerous, because:
    // in 4.4, the default SSL hostname verifier and default cookie policy now validate certificate identity and cookie domain of origin
    // against the public suffix list maintained by Mozilla.org https://publicsuffix.org/list
    // also:  4.3.6: this release HttpClient disables all versions of SSL (including SSLv3) in favor of the TLS protocol by default.
    // Those users who wish to continue using SSLv3 need to explicitly enable support for it.
    // help info: http://stackoverflow.com/questions/1828775/how-to-handle-invalid-ssl-certificates-with-apache-httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.2.3'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version:'4.2.3'
    compile group: 'org.apache.commons', name: 'commons-io', version:'1.3.2'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version:'3.2'
    compile group: 'org.apache.ant', name: 'ant', version:'1.9.4'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version:'1.47'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version:'7.3.0.v20110203'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version:'7.3.0.v20110203'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile(group: 'org.testng', name: 'testng', version:'6.8.5') {
        exclude(module: 'junit')
    }
}

jar {
    manifest.attributes( 'provider': 'gradle')
    manifest.attributes( 'Implementation-Title': "$componentDescription - V$version")
    archiveName = "$componentName-$version"+'.jar'
}

task copyJarToDistributions (type: Copy) {
    dependsOn(sourceZip)
    from("$buildDir/libs/")
	into("$buildDir/distributions")
}

task createPom << {
    pom {
    }.writeTo("$buildDir/distributions/$componentName-${version}.pom")
}
createPom.dependsOn(copyJarToDistributions)

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${myLocalRepository}")
        }
    }
}